 --------------------------------------------------
|DOCUMENTATION OF THE COMMUNICATION BETWEEN MODULES|
 --------------------------------------------------

Let's assume a basic usecase :

 - There is a Buisiness module that manage sensors and build data. The business module has to transmit that data to a chip with WIFI antenna to send it to a server which can store it.
 - There is a WIFI module that manage HTTP requests. The WIFI module receive messages from the business module and act as an HTTP client, it connects to a server and transmit data using REST standards.
 - There is a server that exposes REST API's that can be contacted.


+-----------------+                        Message  +--------------------+             HTTP request  +--------+
| Business module | <====[Inter-chip protocol]====> | WIFI module client | <====[REST standard]====> | Server |
+-----------------+  Response                       +--------------------+  HTTP response            +--------+
        ^
        |
        |    +--------+
        +--> | Sensor |
             +--------+

=> As we want to be able to continuously check sensors values while transmiting data to a server without interuptions, transmission and reception of messages between the business module and the wifi module has to be virtually asychronous
=> Messages are transmited using serial communication.


           --------------
          |HARDWARE NOTES|
           --------------

An ESP 8266-01S WIFI module has been used in this exemple.
This module has to be powered with 3.3 volts and communicates using 3.3 volts as the "HIGH" value. If it can tolerate up to 5 volts as serial input (RX pin) it will only send 3.3 volts digital signal as serial output (TX pin).
If you try to communicate directly with a 5 volt based board, received bits form the 8266 will be randomly corrupted. You will need a logic level converter to make it work.
I have personaly used an Arduino Zero, which is a 3.3 volt based board with the ESP 8266-01S, so no conversion was required.


           ----------------------
          |COMMUNICATION PROTOCOL|
           ----------------------

To control the WIFI module behaviour, the business module has to send commands that will be recognized by the WIFI module, then specific piece of code will be executed.
The business module doesn't stop his code waiting for an answer, but when the WIFI module finally respond, that answer has to be recognized by the business module and a corresponding callback has to be executed.
To make that communication possible each command request has to be stored in some way inside the business module with the associated callback and probably a timeout information.
Therefore a command sequence is required to identifiy a specific command request alonside with the type of command and other useful informations like error codes and other metadatas.

To manage various type of communication and orders, requests and responses, we need a template that is universal enough.
I propose a serial communication payload in the form of an inline JSON String with some metadatas and the actual data. It looks like this :

{
 "CMD": xxx,		--> [string] Type of command to send 
 "CMD_SEQ": xxx,	--> [unsigned long] Sequence number for this CMD request 
 "CODE": xxx,		--> [int] Exchange code (0 if it is a request and != 0 if it is a response) 
 "ENDPOINT": xxx,	--> [string] CMD request target (for HTTP request commands it is the full URL with protocol and port) 
 "LOGIN": xxx,		--> [string] Login field that can be used for various purposes
 "PASSWORD": xxx,	--> [string] Password field that can be used for various purposes 
 "DATA":            --> JSON data with custom key/value props
	{
	PROP1: xxx,
	PROP2: xxx,
	...
	}
}


=> All messages starts with ASCII 31(unit separator) character and ends with ASCII 23(end of transmission block) character.
As the 8266 ESP-01S WIFI module only have one hardware serial, we need to differenciate log messages from actual inter-chip communication attempts. Those message separators are therefore necessary. 


Already implemented [CMD] in ths project :

	"CMD": "HTTPGET"   => HTTP GET request command
	"CMD": "HTTPPOST"  => HTTP POST request command
	"CMD": "HTTPSGET"  => HTTP GET request command over TLS (can be secured checking the SHA-1 fingerprint hash of the server certificate)
	"CMD": "HTTPSPOST" => HTTP POST request command over TLS (can be secured checking the SHA-1 fingerprint hash of the server certificate)
	"CMD": "NTWKCHANG" => Command to change the network connection of the WIFI module from the business module
	

Already implemented [CODE] in ths project :

	"CODE": 0    => This is a request
	"CODE": -2   => Response flag of technical error inside the wifi module
	"CODE": -3   => Response flag of Unknown command
	"CODE": 200  => Compatible with HTTP codes (-1, 100 - 599) are reserved.
	
-----------------------------------------------

valid example 1 :

{
 "CMD": "NTWKCHANG",
 "CMD_SEQ": 0,
 "CODE": "0",
 "ENDPOINT": "",
 "LOGIN": "networkName",
 "PASSWORD": "Axfru85Kje524P",
 "DATA":
	{
	}
}


valid example 2 :

{
 "CMD": "HTTPPOST",
 "CMD_SEQ": 26,
 "CODE": "0",
 "ENDPOINT": "http://192.168.0.10:8080/api/v1/datapoint",
 "LOGIN": "",
 "PASSWORD": "",
 "DATA":
	{
	"datapoint":"7352"
	}
}